{"version":3,"sources":["@core/components/breadcrumbs/index.js","@core/components/form-errors/index.js","views/settings/mailer.js"],"names":["BreadCrumbs","props","breadCrumbTitle","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","breadCrumbActive","right","className","tag","to","active","errors","Alert","color","Object","keys","map","e","useParams","id","useForm","register","handleSubmit","control","setValue","useState","formErrors","setFormErrors","onSubmit","data","a","history","push","response","Row","Col","lg","Card","Button","Ripple","type","CardBody","Form","FormGroup","Label","for","Input","name","innerRef","required","invalid","mailer","host","port","username","password","encryption","from","row","md","size","offset"],"mappings":"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","file":"static/js/111.dac2c788.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive, right } = props\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-9 mb-2'>\n      {/*<div className='content-header-left col-md-9 col-12 mb-2'>*/}\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                {\n                  breadCrumbParent &&\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent}\n                  </BreadcrumbItem>\n                }\n                {breadCrumbParent2 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent2}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                {breadCrumbParent3 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent3}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                <BreadcrumbItem tag='li' active>\n                  {breadCrumbActive}\n                </BreadcrumbItem>\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      {\n        right ? (\n          <div className='content-header-right text-md-right col-3'>\n            {/*<div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>*/}\n            <div className='form-group breadcrum-right dropdown'>\n              { right }\n              {/*<UncontrolledButtonDropdown>*/}\n              {/*  <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>*/}\n              {/*    <Grid size={14} />*/}\n              {/*  </DropdownToggle>*/}\n              {/*  <DropdownMenu tag='ul' right>*/}\n              {/*    <DropdownItem tag={Link} to='/apps/chat'>*/}\n              {/*      <CheckSquare className='mr-1' size={14} />*/}\n              {/*      <span className='align-middle'>Todo</span>*/}\n              {/*    </DropdownItem>*/}\n              {/*    <DropdownItem tag={Link} to='/apps/chat'>*/}\n              {/*      <MessageSquare className='mr-1' size={14} />*/}\n              {/*      <span className='align-middle'>Chat</span>*/}\n              {/*    </DropdownItem>*/}\n              {/*    <DropdownItem tag={Link} to='/apps/email'>*/}\n              {/*      <Mail className='mr-1' size={14} />*/}\n              {/*      <span className='align-middle'>Email</span>*/}\n              {/*    </DropdownItem>*/}\n              {/*    <DropdownItem tag={Link} to='/apps/calendar'>*/}\n              {/*      <Calendar className='mr-1' size={14} />*/}\n              {/*      <span className='align-middle'>Calendar</span>*/}\n              {/*    </DropdownItem>*/}\n              {/*  </DropdownMenu>*/}\n              {/*</UncontrolledButtonDropdown>*/}\n            </div>\n          </div>\n        ) : ''\n      }\n\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  breadCrumbTitle: Proptypes.string.isRequired,\n  breadCrumbActive: Proptypes.string.isRequired\n}\n","import { Alert } from 'reactstrap'\n\nexport default function ({ errors }) {\n    if (!errors) return <></>\n    return (\n        <Alert color='danger'>\n            { Object.keys(errors).map(e => <div className='alert-body'>{errors[e][0]}</div>) }\n        </Alert>\n    )\n}\n","import { Fragment, useState } from 'react'\nimport Breadcrumbs from '@components/breadcrumbs'\nimport { useParams } from 'react-router-dom'\nimport { Button, Card, CardBody, Row, Col, Form, FormGroup, Input, Label } from 'reactstrap'\nimport FormErrors from '@components/form-errors'\nimport { useForm } from 'react-hook-form'\nimport CardHeader from 'reactstrap/lib/CardHeader'\n\nexport default () => {\n\n    const { id } = useParams()\n\n    // const { data: model, update: updateCategory } = useCategory(id)\n    const { register, errors, handleSubmit, control, setValue } = useForm()\n    const [formErrors, setFormErrors] = useState(null)\n\n    const onSubmit = async data => {\n        try {\n            // await updateCategory(data)\n            history.push('/category/list')\n        } catch (e) {\n            setFormErrors(e.response?.data?.errors)\n        }\n    }\n\n    return (\n        <Fragment>\n            <Breadcrumbs breadCrumbTitle='Settings' breadCrumbActive='Mailer'/>\n            <Row>\n                <Col lg='6'>\n                    <Card>\n                    <CardHeader className='p-1'>\n                        Mailer\n                        <Button.Ripple color='success' type='submit'>\n                            Save\n                        </Button.Ripple>\n                    </CardHeader>\n                    <hr className='m-0'/>\n                        <CardBody>\n                            <Form onSubmit={handleSubmit(onSubmit)}>\n\n                                <FormGroup>\n                                    <Label for='mailer'>Mailer</Label>\n                                    <Input\n                                        type='text'\n                                        name='mailer'\n                                        id='mailer'\n                                        innerRef={register({required: true})}\n                                        invalid={errors.mailer && true}\n                                    />\n                                </FormGroup>\n\n                                <FormGroup >\n                                    <Label for='host'>Host</Label>\n                                    <Input\n                                        id='host'\n                                        type='text'\n                                        name='host'\n                                        innerRef={register({required: true})}\n                                        invalid={errors.host && true}\n                                    />\n                                </FormGroup>\n\n                                <FormGroup>\n                                    <Label for='host'>Port</Label>\n                                        <Input\n                                            type='text'\n                                            name='port'\n                                            id='port'\n                                            innerRef={register({required: true})}\n                                            invalid={errors.port && true}\n                                        />\n                                </FormGroup>\n\n                                <FormGroup>\n                                    <Label for='username'>Username</Label>\n                                    <Input\n                                        type='text'\n                                        name='username'\n                                        id='username'\n                                        innerRef={register({required: true})}\n                                        invalid={errors.username && true}\n                                    />\n                                </FormGroup>\n\n                                <FormGroup>\n                                    <Label for='password'>Password</Label>\n                                    <Input\n                                        type='text'\n                                        name='password'\n                                        id='password'\n                                        innerRef={register({required: true})}\n                                        invalid={errors.password && true}\n                                    />\n                                </FormGroup>\n\n                                <FormGroup>\n                                    <Label for='password'>Encryption</Label>\n                                    <Input\n                                        type='text'\n                                        name='encryption'\n                                        id='encryption'\n                                        innerRef={register({required: true})}\n                                        invalid={errors.encryption && true}\n                                    />\n                                </FormGroup>\n\n                                <FormGroup>\n                                    <Label for='from'>From Email</Label>\n                                    <Input\n                                        type='text'\n                                        name='from'\n                                        id='from'\n                                        innerRef={register({required: true})}\n                                        invalid={errors.from && true}\n                                    />\n                                </FormGroup>\n\n                                <FormGroup>\n                                    <Label for='name'>From Name</Label>\n                                    <Input\n                                        type='text'\n                                        name='name'\n                                        id='name'\n                                        innerRef={register({required: true})}\n                                        invalid={errors.name && true}\n                                    />\n                                </FormGroup>\n\n\n                                <FormGroup className='mb-0' row>\n                                    <Col className='d-flex' md={{size: 9, offset: 3}}>\n                                        <FormErrors errors={formErrors} />\n                                    </Col>\n                                    <Col className='d-flex' md={{size: 9, offset: 3}}>\n                                   \n                                    </Col>\n                                </FormGroup>\n\n                            </Form>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </Fragment>\n    )\n}\n"],"sourceRoot":""}