{"version":3,"sources":["views/order/list/Processing.js"],"names":["types","value","label","shippingStatusClasses","WAITING","SHIPPED","DELIVERED","useState","type","setType","col","op","val","ability","can","conditions","setConditions","Filters","theme","selectThemeColors","classNamePrefix","className","options","filter","list","onChange","e","updated","undefined","push","onFilterChange","canAddOrder","breadCrumbTitle","breadCrumbActive","useDatatable","initialOrder","column","dir","defaultSortField","defaultSortAsc","filterBar","actions","add","columns","name","selector","sortable","sortField","minWidth","cell","row","dept","color","pill","taxed","tax_exempt","price_offer","shipping","status","Number","parseFloat","total","toFixed"],"mappings":"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","file":"static/js/110.7dfc3717.chunk.js","sourcesContent":["import { Fragment, useState } from 'react'\nimport Breadcrumbs from '@components/breadcrumbs'\nimport Datatable from '@components/datatable'\nimport { useDatatable } from '@data/use-order'\nimport actions from '../actions'\nimport { Badge, Button } from 'reactstrap'\nimport { selectThemeColors } from '@utils'\nimport Select from 'react-select'\nimport ability from \"../../../configs/acl/ability\"\n\nconst types = [\n    { value: false, label: 'Paid' },\n    { value: true, label: 'Zemam' }\n]\n\nconst shippingStatusClasses = {\n    WAITING: 'light-warning',\n    SHIPPED: 'light-info',\n    DELIVERED: 'light-success'\n}\n\nexport default () => {\n\n    const [type, setType] = useState(false)\n\n    const [conditions, setConditions] = useState([\n        {\n            col: 'status', op: '=', val: 'PROCESSING'\n        },\n        {\n            col: 'options->dept', op: '=', val: false\n        },\n        {\n            col: 'shipping->status', op: '!=', val: 'SHIPPED'\n        },\n        {\n            col: 'shipping->status', op: '!=', val: 'DELIVERED'\n        },\n        (!ability.can('read', 'untaxed_list_view') && !ability.can('read', 'befor_completed_untaxed_list_view'))  ? {\n            col: 'options->taxed',  val: true\n        } : {\n\n        }\n    ])\n\n    const onFilterChange = (val, col) => {\n        const updated = conditions.filter(e => e.col !== col)\n        if (val !== null && val !== undefined) {\n            updated.push({ val, col })\n            setConditions(updated)\n        }\n        setType(val)\n    } \n\n    const Filters = () => (\n        <Select\n            theme={selectThemeColors}\n            classNamePrefix='select'\n            className='react-select w-25'\n            options={types}\n            value={types.filter(list => list.value === (type))}\n            onChange={(e) => onFilterChange(e?.value, 'options->dept')}\n        />\n    )\n    const canAddOrder = ability.can('read', 'order_add')\n    return (\n        <Fragment>\n            <Breadcrumbs breadCrumbTitle='Orders' breadCrumbActive='Orders' />\n            <Datatable\n                useDatatable={useDatatable}\n                initialOrder={{column: 'id', dir: 'desc'}}\n                defaultSortField={'number'}\n                defaultSortAsc={false}\n                filterBar={<Filters />}\n                conditions={conditions}\n                actions={actions}\n                add={canAddOrder ? '/order/create' : null}\n                columns={[\n                    {\n                        name: 'Number',\n                        selector: 'number',\n                        sortable: true,\n                        defaultSortAsc: false,\n                        sortField: 'id',\n                        minWidth: '100px'\n                    },\n                    {\n                        name: 'customer',\n                        selector: 'customer.name',\n                        sortable: true,\n                        sortField: 'customer->name',\n                        minWidth: '100px'\n                    },\n                    {\n                        name: 'phone',\n                        selector: 'customer.phone',\n                        sortable: true,\n                        sortField: 'customer->phone',\n                        minWidth: '100px'\n                    },\n                    {\n                        name: 'Info',\n                        sortable: false,\n                        minWidth: '100px',\n                        cell: row => (\n                            <>\n                                {\n                                    row.options?.dept &&\n                                    <Badge className='text-capitalize' color={'light-secondary'} pill>Zemam</Badge>\n                                }\n                                {\n                                    row.options?.taxed &&\n                                    <Badge className='text-capitalize' color={'light-secondary'} pill>Taxed</Badge>\n                                }\n                                {\n                                    !row.options?.taxed &&\n                                    <Badge className='text-capitalize' color={'light-secondary'} pill>Normal</Badge>\n                                }\n                                {\n                                    row.options?.tax_exempt &&\n                                    <Badge className='text-capitalize' color={'light-secondary'} pill>M3fe</Badge>\n                                }\n                                {\n                                    row.options?.price_offer &&\n                                    <Badge className='text-capitalize' color={'light-secondary'} pill>Offer</Badge>\n                                }\n                            </>\n                        )\n                    },\n                    {\n                        name: 'shipping',\n                        selector: 'shipping.status',\n                        sortable: true,\n                        sortField: 'shipping->status',\n                        minWidth: '100px',\n                        cell: row => (\n                            <Badge className='text-capitalize' color={shippingStatusClasses[row?.shipping?.status] || ''} pill>\n                                {row?.shipping?.status}\n                            </Badge>\n                        )\n                    },\n                    {\n                        name: 'Total',\n                        selector: 'total',\n                        sortable: true,\n                        minWidth: '100px',\n                        cell: row => Number.parseFloat(row?.total).toFixed(2)\n                    }\n                ]}\n            />\n        </Fragment>\n    )\n}"],"sourceRoot":""}