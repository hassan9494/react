{"version":3,"sources":["data/use-shipping-provider.js","data/use-data.js","views/order/list/Delivery.js"],"names":["url","api","create","params","apiCalls","update","id","delete","useModel","model","useDatatable","datatable","useModels","models","fetcher","axios","get","then","res","data","a","post","put","useSWR","mutate","error","loading","revalidateOnFocus","revalidateOnReconnect","refreshWhenOffline","refreshWhenHidden","refreshInterval","base","endpoint","page","limit","search","order","conditions","JSON","stringify","items","total","mutates","table","shippingStatusClasses","WAITING","SHIPPED","DELIVERED","useState","provider","setProvider","providersList","useShippingProviders","map","e","label","name","value","col","op","val","setConditions","useEffect","updated","filter","push","Filters","theme","selectThemeColors","classNamePrefix","className","options","placeholder","onChange","isClearable","option","breadCrumbTitle","breadCrumbActive","initialOrder","column","dir","defaultSortField","defaultSortAsc","filterBar","actions","columns","selector","sortable","sortField","minWidth","cell","row","dept","color","pill","taxed","tax_exempt","price_offer","shipping","status","Number","parseFloat","toFixed"],"mappings":"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","file":"static/js/103.b1597fa4.chunk.js","sourcesContent":["import { datatable, model, models, api as apiCalls } from './use-data'\n\nconst url = 'shipping-provider'\n\nexport const api = {\n    create: params => apiCalls.create(url, params),\n    update: (id, params) => apiCalls.update(url, id, params),\n    delete: id => apiCalls.delete(url, id)\n}\n\nexport function useModel(id) {\n    return model(url, id)\n}\n\nexport function useDatatable(params) {\n    return datatable(url, `${url}/datatable`, params)\n}\n\nexport function useModels() {\n    return models(url)\n}\n","import useSWR from 'swr'\nimport axios from '../utility/axiosIsntance'\n\nconst fetcher = (url) => axios.get(url).then(res => res.data?.data)\n\nexport const api = {\n\n    create: async (url, params) => {\n        const { data } = await axios.post(url, params)\n        return data?.data\n    },\n\n    update: async (url, id, params) => {\n        const { data } = await axios.put(`${url}/${id}`, params)\n        return data?.data\n    },\n\n    delete: async (url, id) => {\n        await axios.delete(`${url}/${id}`)\n    }\n}\n\nexport function model(url, id) {\n\n    const { data, mutate, error } = useSWR(`${url}/${id}`, fetcher)\n\n    const loading = !data && !error\n\n    return {\n        loading,\n        error,\n        data,\n        mutate,\n        update: async (params) => {\n            await api.update(url, id, params)\n            await mutate()\n        }\n    }\n}\n\n\nexport function models(url) {\n\n    const { data, mutate, error } = useSWR(url, fetcher, {\n        revalidateOnFocus: false,\n        revalidateOnReconnect: false,\n        refreshWhenOffline: false,\n        refreshWhenHidden: false,\n        refreshInterval: 0\n    })\n\n    const loading = !data && !error\n\n    return {\n        loading,\n        error,\n        data: data || [],\n        mutate,\n        create: async (params) => api.create(params)\n    }\n}\n\n\nexport function datatable(base, endpoint, { page, limit, search, order = {}, conditions = {} }) {\n\n    const url = `${endpoint}?page=${page}&limit=${limit}&search=${search}&order=${JSON.stringify(order)}&conditions=${JSON.stringify(conditions)}`\n\n    const { data, mutate, error } = useSWR(url, fetcher)\n\n    const loading = !data && !error\n\n    return {\n        loading,\n        error,\n        data: data?.items || [],\n        total: data?.total || 0,\n        mutate,\n        mutates: {\n            delete: async (id) => {\n                await api.delete(base, id)\n                await mutate(url)\n            }\n        }\n    }\n\n}\n\nexport function table(endpoint, { conditions }) {\n\n    const url = `${endpoint}?conditions=${JSON.stringify(conditions)}`\n\n    const { data, mutate, error } = useSWR(url, fetcher)\n\n    const loading = !data && !error\n\n    return {\n        loading,\n        error,\n        data: data?.items || [],\n        total: data?.total || 0,\n        mutate\n    }\n\n}\n","import { Fragment, useEffect, useState } from 'react'\nimport Breadcrumbs from '@components/breadcrumbs'\nimport Datatable from '@components/datatable'\nimport { useDatatable } from '@data/use-order'\nimport actions from '../actions'\nimport { Badge, Button } from 'reactstrap'\nimport { selectThemeColors } from '@utils'\nimport Select from 'react-select'\nimport { useModels as useShippingProviders } from '@data/use-shipping-provider'\n\nconst shippingStatusClasses = {\n    WAITING: 'light-warning',\n    SHIPPED: 'light-info',\n    DELIVERED: 'light-success'\n}\n\nexport default () => {\n\n    const [provider, setProvider] = useState(false)\n\n    const { data: providers } = useShippingProviders()\n    const providersList = providers.map(e => ({ label: e.name, value: e.id }))\n\n    const [conditions, setConditions] = useState([\n        {\n            col: 'status', op: '=', val: 'PROCESSING'\n        },\n        {\n            col: 'shipping->status', op: '!=', val: null\n        },\n        {\n            col: 'shipping->status', op: '!=', val: 'WAITING'\n        }\n    ])\n\n    const onFilterChange = (val, col) => {\n        const updated = conditions.filter(e => e.col !== col)\n        updated.push({ val, col })\n        setConditions(updated)\n        setType(val)\n    }\n\n    useEffect(() => {\n        const updated = conditions.filter(e => e.col !== 'shipping_provider_id')\n        if (provider) updated.push({ val: provider, col: 'shipping_provider_id' })\n        setConditions(updated)\n    }, [provider])\n\n    const Filters = () => (\n        <>\n            <Select\n                theme={selectThemeColors}\n                classNamePrefix='select'\n                className='react-select w-25'\n                options={providersList}\n                placeholder={'Select Shipping Provider...'}\n                onChange={val => {\n                    setProvider(val?.value || null)\n                }}\n                isClearable={true}\n                value={providersList.filter(option => option.value === provider)}\n            />\n        </>\n    )\n\n    return (\n        <Fragment>\n            <Breadcrumbs breadCrumbTitle='Orders' breadCrumbActive='Orders' />\n            <Datatable\n                useDatatable={useDatatable}\n                initialOrder={{column: 'id', dir: 'desc'}}\n                defaultSortField={'number'}\n                defaultSortAsc={false}\n                filterBar={<Filters />}\n                conditions={conditions}\n                actions={actions}\n                columns={[\n                    {\n                        name: 'Number',\n                        selector: 'number',\n                        sortable: true,\n                        defaultSortAsc: false,\n                        sortField: 'id',\n                        minWidth: '100px'\n                    },\n                    {\n                        name: 'customer',\n                        selector: 'customer.name',\n                        sortable: true,\n                        sortField: 'customer->name',\n                        minWidth: '100px'\n                    },\n                    {\n                        name: 'phone',\n                        selector: 'customer.phone',\n                        sortable: true,\n                        sortField: 'customer->phone',\n                        minWidth: '100px'\n                    },\n                    {\n                        name: 'Info',\n                        sortable: false,\n                        minWidth: '100px',\n                        cell: row => (\n                            <>\n                                {\n                                    row.options?.dept &&\n                                    <Badge className='text-capitalize' color={'light-secondary'} pill>Zemam</Badge>\n                                }\n                                {\n                                    row.options?.taxed &&\n                                    <Badge className='text-capitalize' color={'light-secondary'} pill>Taxed</Badge>\n                                }\n                                {\n                                    !row.options?.taxed &&\n                                    <Badge className='text-capitalize' color={'light-secondary'} pill>Normal</Badge>\n                                }\n                                {\n                                    row.options?.tax_exempt &&\n                                    <Badge className='text-capitalize' color={'light-secondary'} pill>M3fe</Badge>\n                                }\n                                {\n                                    row.options?.price_offer &&\n                                    <Badge className='text-capitalize' color={'light-secondary'} pill>Offer</Badge>\n                                }\n                            </>\n                        )\n                    },\n                    {\n                        name: 'shipping',\n                        selector: 'shipping.status',\n                        sortable: true,\n                        sortField: 'shipping->status',\n                        minWidth: '100px',\n                        cell: row => (\n                            <Badge className='text-capitalize' color={shippingStatusClasses[row?.shipping?.status] || ''} pill>\n                                {row?.shipping?.status}\n                            </Badge>\n                        )\n                    },\n                    {\n                        name: 'Total',\n                        selector: 'total',\n                        sortable: true,\n                        minWidth: '100px',\n                        cell: row => Number.parseFloat(row?.total).toFixed(2)\n                    }\n                ]}\n            />\n        </Fragment>\n    )\n}"],"sourceRoot":""}